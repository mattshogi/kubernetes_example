# GitHub Actions workflow for deployment
name: Deploy k3s cluster

on:
  push:
    branches: [main]

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Terraform Init
        working-directory: infra
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve -var "aws_region=us-east-1" -var "instance_type=t3.micro" || echo "Terraform apply failed, continuing for diagnostics."

      - name: Get EC2 Public IP via AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=k3s-node" "Name=instance-state-name,Values=running" --query "Reservations[*].Instances[*].InstanceId" --output text | head -n 1)
          ip=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query "Reservations[*].Instances[*].PublicIpAddress" --output text)
          echo "EC2 instance public IP: $ip"
          if [[ -z "$ip" ]]; then
            echo "ERROR: EC2 instance was not created or has no public IP. Skipping deployment steps."
            exit 0
          fi
          ping -c 3 $ip || { echo "ERROR: Instance is not reachable. Skipping deployment steps."; exit 0; }

      - name: Set up SSH key for kubeconfig retrieval
        if: success()
        run: |
          echo "${{ secrets.K3S_SSH_PRIVATE_KEY }}" > id_rsa
          chmod 600 id_rsa

      - name: Retrieve kubeconfig from EC2
        if: success()
        run: |
          scp -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip":/home/ec2-user/.kube/config ./kubeconfig || echo "Failed to retrieve kubeconfig, continuing."

      - name: Deploy Hello World App
        if: success()
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl apply -f hello-world.yaml || echo "Failed to deploy Hello World app, continuing."

      - name: Validate Hello World Deployment
        if: success()
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl rollout status deployment/hello-world || echo "Hello World deployment validation failed."
          kubectl get svc hello-world-service || echo "Failed to get Hello World service."
          kubectl get pods || echo "Failed to get pods."

      - name: Output Hello World Service External IP
        if: success()
        run: |
          export KUBECONFIG=$(pwd)/kubeconfig
          echo "Getting external IP for hello-world-service..."
          kubectl get svc hello-world-service -o json | jq -r '.status.loadBalancer.ingress[0].ip' || echo "No external IP assigned yet."

      - name: Post-Deployment Validation
        if: success()
        run: |
          echo "Validating EC2 instance connectivity..."
          ping -c 3 $ip || echo "Instance not reachable via ping."
          echo "Validating SSH access..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "hostname && uptime" || echo "SSH failed."
          echo "Validating k3s cluster health..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "kubectl get nodes; kubectl get pods -A" || echo "k3s validation failed."
          echo "Validating MetalLB pods..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "kubectl get pods -n metallb-system" || echo "MetalLB pods not running."
          echo "Validating MetalLB address pool..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "kubectl get ipaddresspools -n metallb-system" || echo "MetalLB address pool missing."
          echo "Validating Hello World service..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "kubectl get svc hello-world-service" || echo "Hello World service not found."

      - name: Automate MetalLB Address Pool
        if: success()
        run: |
          echo "Automating MetalLB address pool configuration..."
          ssh -o StrictHostKeyChecking=no -i id_rsa ec2-user@"$ip" "PRIVATE_IP=$(hostname -I | awk '{print $1}'); cat <<EOF > /home/ec2-user/metallb-pool.yaml
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: default-pool
  namespace: metallb-system
spec:
  addresses:
  - ${PRIVATE_IP}-${PRIVATE_IP}
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: default-l2
  namespace: metallb-system
spec:
  ipAddressPools:
  - default-pool
EOF
kubectl apply -f /home/ec2-user/metallb-pool.yaml" || echo "Failed to automate MetalLB address pool."
      - name: List files in workspace for debug
        run: |
          echo "Listing files in workspace root:"
          ls -l
          echo "Listing files in infra directory:"
          ls -l infra
          echo "Listing files in cluster directory:"
          ls -l cluster
